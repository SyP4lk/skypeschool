generator client {
  provider = "prisma-client-js"
  output   = "../server/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* === Базовые enum'ы ролей и статусов === */
enum Role {
  admin
  teacher
  student
}

enum LessonStatus {
  planned
  completed
  cancelled
}

enum LessonChannel {
  skype
  zoom
  whatsapp
  telegram
  other
}

/** Типы финансовых операций */
enum TxType {
  deposit           // + студенту (ручное пополнение админом)
  lesson_charge     // - студенту (списание за проведённый урок)
  lesson_income     // + преподавателю (доход за проведённый урок)
  withdraw_request  // 0 (лог факта заявки)
  withdraw_paid     // - преподавателю (выплата)
  admin_adjustment  // +/- любому пользователю
}

/** Статус заявки на вывод средств */
enum WithdrawStatus {
  pending
  approved
  rejected
}

/** Статусы для инбокса (поддержка/пробные заявки) */
enum InboxStatus {
  new
  processed
}

/** Роль автора сообщения поддержки (для тредов) */
enum SupportRole {
  user
  admin
}

/* === Модели === */

model Pricing {
  id           String   @id @default(uuid())
  teacherId    String
  subjectId    String
  teacherPrice Int      // цена учителю (копейки)
  publicPrice  Int      // цена для ученика (копейки)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([teacherId, subjectId], name: "pricing_unique_pair")
}

model User {
  id            String           @id @default(uuid())
  login         String           @unique
  /* Новые поля под регистрацию/People */
  email         String?          @unique
  phone         String?          @unique
  passwordHash  String
  role          Role
  firstName     String?
  lastName      String?
  tz            String           @default("Europe/Warsaw")
  balance       Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  /* Профили */
  teacherProfile TeacherProfile?
  studentProfile StudentProfile?

  /* Связи уроков */
  lessonsAsTeacher Lesson[] @relation("TeacherLessons")
  lessonsAsStudent Lesson[] @relation("StudentLessons")

  /* Финансы */
  balanceChanges BalanceChange[] @relation("UserBalanceChanges")
  changesMade    BalanceChange[] @relation("AdminBalanceChanges")

  /* Заявки на вывод (для преподователя) */
  withdrawals Withdrawal[]

  @@index([role])
}

model TeacherProfile {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique
  photo           String?
  aboutShort      String?
  aboutFull       String?
  education       String?
  isActive        Boolean         @default(true)
  sortOrder       Int             @default(0)
  contactVk       String?
  contactTelegram String?
  contactWhatsapp String?
  contactZoom     String?
  contactTeams    String?
  contactDiscord  String?
  contactMax      String?
  teacherSubjects TeacherSubject[]
}

model StudentProfile {
  id             String  @id @default(uuid())
  user           User    @relation(fields: [userId], references: [id])
  userId         String  @unique
  // contacts & avatar for admin UI
  avatar         String?
  contactSkype   String?
  contactVk      String?
  contactGoogle  String?
  contactWhatsapp String?
  contactMax     String?
  contactDiscord String?
}

model Category {
  id       String   @id @default(uuid())
  name     String
  subjects Subject[]
}

model Subject {
  id               String           @id @default(uuid())
  name             String
  slug             String           @unique
  category         Category         @relation(fields: [categoryId], references: [id])
  categoryId       String
  descriptionShort String?
  descriptionFull  String?
  benefits         Json?
  program          Json?
  seoTitle         String?
  seoDescription   String?
  teacherSubjects  TeacherSubject[]
  lessons          Lesson[]
  trialRequests    TrialRequest[]   @relation(name: "SubjectToTrialRequests")
}

model TeacherSubject {
  id        String         @id @default(uuid())
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId String
  subject   Subject        @relation(fields: [subjectId], references: [id])
  subjectId String
  price     Int
  duration  Int
  // При желании можно включить уникальность связки (аккуратно, если уже есть дубликаты):
  // @@unique([teacherId, subjectId, duration])
}

model Article {
  id        String   @id @default(uuid())
  slug      String   @unique
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
}

model Lesson {
  id          String       @id @default(uuid())
  teacher     User         @relation("TeacherLessons", fields: [teacherId], references: [id])
  teacherId   String
  student     User         @relation("StudentLessons", fields: [studentId], references: [id])
  studentId   String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   String
  startsAt    DateTime
  duration    Int
  status      LessonStatus @default(planned)
  channel     LessonChannel
  channelLink String?
  note        String?

  /**
   * Цена в копейках (фиксируется при создании/первом завершении).
   */
  price              Int?
  publicPriceAtCharge Int?

  @@index([teacherId, startsAt])
  @@index([studentId, startsAt])
}

model BalanceChange {
  id        String   @id @default(uuid())
  user      User     @relation("UserBalanceChanges", fields: [userId], references: [id])
  userId    String
  /** Сумма со знаком (копейки) */
  delta     Int
  /** Комментарий/причина (оставляем совместимость с фронтом) */
  reason    String?
  /** Админ, который произвёл изменение (если применимо) */
  admin     User?    @relation("AdminBalanceChanges", fields: [adminId], references: [id])
  adminId   String?
  /** Тип операции (см. TxType) */
  type      TxType?
  /** Любые дополнительные данные/линки (например, { lessonId, withdrawalId }) */
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([type])
}

model TrialRequest {
  id        String      @id @default(uuid())
  name      String
  contact   String?
  subjectId String?
  subject   Subject?    @relation(name: "SubjectToTrialRequests", fields: [subjectId], references: [id])
  message   String?
  status    InboxStatus @default(new)
  createdAt DateTime    @default(now())

  @@index([status, createdAt])
}

/**
 * Сообщения поддержки с тредами.
 * Добавлены поля threadId, role, clientKey + индексы.
 */
model SupportMessage {
  id         String       @id @default(uuid())
  fromLogin  String?
  contact    String?
  message    String
  status     InboxStatus  @default(new)
  createdAt  DateTime     @default(now())

  // --- новые поля для тредов/ролей ---
  threadId   String?
  role       SupportRole  @default(user)
  clientKey  String?

  @@index([status, createdAt])
  @@index([threadId])
  @@index([threadId, createdAt], name: "SupportMessage_threadId_createdAt_idx")
}

/** Заявки на вывод у преподавателей */
model Withdrawal {
  id         String          @id @default(uuid())
  teacher    User            @relation(fields: [teacherId], references: [id])
  teacherId  String
  amount     Int
  notes      String?
  status     WithdrawStatus  @default(pending)
  createdAt  DateTime        @default(now())
  resolvedAt DateTime?

  @@index([status, createdAt])
}

/** Простые системные настройки (ключ-значение). */
model Setting {
  key   String @id
  value String
}
