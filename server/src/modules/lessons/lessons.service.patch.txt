// --- PATCH: transactional updateStatusByTeacher (charges on completed) ---
async updateStatusByTeacher(teacherUserId: string, lessonId: string, dto: { status: 'completed' | 'cancelled' }) {
  const newStatus =
    dto.status === 'completed' ? this.prisma.$Enums.LessonStatus?.completed ?? 'completed' :
    dto.status === 'cancelled' ? this.prisma.$Enums.LessonStatus?.cancelled ?? 'cancelled' : null as any;
  if (!newStatus) throw new BadRequestException('Недопустимый статус');

  // грузим урок с нужными полями
  const lesson = await this.prisma.lesson.findUnique({
    where: { id: lessonId },
    select: { id: true, teacherId: true, studentId: true, subjectId: true, duration: true, status: true, price: true },
  });
  if (!lesson) throw new NotFoundException('Урок не найден');
  if (lesson.teacherId !== teacherUserId) throw new ForbiddenException('Вы не можете менять чужой урок');
  if (lesson.status === newStatus) return { ok: true };

  if (newStatus === 'completed' || String(newStatus).endsWith('completed')) {
    // Определяем цену: фиксирована в lesson.price или из TeacherSubject
    let price = lesson.price ?? null;
    if (!price || price <= 0) {
      const tProfile = await this.prisma.teacherProfile.findUnique({ where: { userId: teacherUserId }, select: { id: true } });
      if (!tProfile) throw new BadRequestException('Нет профиля преподавателя');
      const ts = await this.prisma.teacherSubject.findFirst({
        where: { teacherId: tProfile.id, subjectId: lesson.subjectId, duration: lesson.duration },
        select: { price: true },
      });
      if (!ts) throw new BadRequestException('Не найдена цена для этой длительности');
      price = ts.price;
    }

    await this.prisma.$transaction(async (db) => {
      const student = await db.user.findUnique({ where: { id: lesson.studentId }, select: { balance: true } });
      if (!student) throw new NotFoundException('Студент не найден');
      if ((student.balance ?? 0) < price) throw new BadRequestException('INSUFFICIENT_FUNDS');

      await db.user.update({ where: { id: lesson.studentId }, data: { balance: { decrement: price } } });
      await db.balanceChange.create({ data: { userId: lesson.studentId, delta: -price, reason: `Lesson ${lesson.id}`, type: 'lesson_charge' as any } });

      await db.user.update({ where: { id: lesson.teacherId }, data: { balance: { increment: price } } });
      await db.balanceChange.create({ data: { userId: lesson.teacherId, delta: price, reason: `Lesson ${lesson.id}`, type: 'lesson_income' as any } });

      await db.lesson.update({ where: { id: lesson.id }, data: { status: newStatus, price } });
    });

    return { ok: true };
  } else {
    const updated = await this.prisma.lesson.update({ where: { id: lessonId }, data: { status: newStatus } });
    return { ok: true, lesson: updated };
  }
}
// --- END PATCH ---
